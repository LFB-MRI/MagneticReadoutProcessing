UDPP - User Defined Processing Pipeline
#######################################

After usage of the CLI and taking some measurements of the magnets, its time ro process them.
One solution is to use a Jupyter Notebook to call the ``MRP`` functions directly or using ``UDPP`` interface.
Here its possible to define a data analysis pipeline (as such in CI pipelines) and run them like CLI commands.


Installation
************

.. code-block:: bash

    $ git clone https://github.com/LFB-MRI/MagneticReadoutProcessing ./MagneticReadoutProcessing
    $ cd ./MagneticReadoutProcessing
    $ pip3 install -r requirements.txt


    # RUNNING THE CLI USING VENV (if library is not installed on system)
    $ ./venv/bin/python3.9 ./udpp/udpp.py --help


.. note::
    In order to allow direct running of the examples below, the ``venv`` is used.
    So all cli commands are changed to: ``./venv/bin/python3.9 ./udpp/udpp.py`` instead of ``python3 ./udpp/udpp.py``.


To list all enabled pipelines the  command can be used.

.. code-block:: bash

    # List enabled pipelines
    $ ./venv/bin/python3.9 ./udpp/udpp.py pipeline listenabledpipelines
    generate_temperature_calibration_reading.yaml

Pipeline Definition
*******************

Settings
========
Each pipeline starts with a ``settings`` section which contains some information about the pipeline.
The ``enable`` parameter allows to skip the execution of the pipeline using the ``udpp.py pipeline run`` command.


.. code-block:: yaml

    # PIPELINE DEFINITION
    ---
    settings:
    name: "<pipeline name>"
    enabled: true


Step definition
===============


The step definition contains a function that will be called and their needed input parameters.
A list of callable function can be retrieved using ``udpp.py pipeline listfunctions``:

.. code-block:: bash

    # List enabled pipelines
    $ ./venv/bin/python3.9 ./udpp/udpp.py pipeline listfunctions
    {'import_readings': {'name': 'import_readings', 'parameter_names': ['input_folder', 'file_regex', 'recursive'], 'parameter_types': {'input_folder': 'str', 'file_regex': 'str', 'recursive': 'bool'}, 'default': ('', '(.)*.mag.json', False), 'return': 'list(MRP.MRPReading.MRPReading)'}}
    ...


These are implemented in ``UDPPFFunctionCollection.py``.
By modifying the file it is possible to make further functions available to the pipeline system.

This example shows how to create a step which calls the ``import_readings`` function.

.. code-block:: yaml

    # STEP DEFINITION
    stage import_readings: #stage <stage_name>
        function: import_readings # function to call see MRPudpp.py pipeline listfunctions or UDPPFFunctionCollection.py
        main: true # RUN AT STARTUP = ENTRYPOINT
        parameters:
            input_folder: tlv493d_N45_12x12x12
            regex: (.)*.mag.json


.. note::
   The ``main`` parameter if set to true, is the entrypoint for the pipeline.
   In one step this parameter must be set to ``true``.  


Connect several stages
======================

To create a flow (connecting several stages together), the output of one stage can be the input of another stage.
This can be done using the name of a stages ``stage <name>`` as parameter of the next stage. 
.. note::
   Its not possible to implement any sort of circles!
   The system checks at startup for circles and any other misconfigurations.



.. code-block:: yaml

    # LETS ADD TWO READinG IMPORTER STAGES
    stage import_readings_b:
        function: import_readings
        main: true
        parameters:
            input_folder: tlv493d_N45_12x12x12
            regex: (.)*.mag.json

        stage import_readings_a:
        function: import_readings
        main: true
        parameters:
            input_folder: tlv493d_N45_1

















Function Collection
*******************

.. note::
    Currently, usable functions doesnt support tuple or arrays as input and output parameters.
    Please encapsulate these type into custom classes or dicts.

.. autosummary::
    :toctree: _autosummary
    :template: custom-module-template.rst
    :recursive:

    udpp.UDPPFFunctionCollection